mysql数据库：
1.mysql设计部分
2.mysql操作部分

mysql设计部分：

数据表三部分：
1.表结构 -- 列信息
2.表数据 -- 行信息
3.表索引 -- 把列中的行加到索引中

例如：用户信息表   表记录 表字段 表结构
id  name  password
1   joker  123456

1.net stop mysql  //关闭
2.net start mysql  //开启
3.mysql -uroot -p123 -tee=c:\mysql.log  //登录
4.show datebases;  //查看数据库
5.use test;   //切换数据库
6.desc joker2; //查看表结构或表字段
7.select * from joker2;  //查看表记录
8.exit //退出mysql 终端

mysql基础篇：------------------------------------------------------------------------

一.数据库操作：
1.创建数据库
create database haha；
2.查看数据库
show databases;
3.删除数据库
drop database haha;
4.切换数据库
use haha;

二.表操作
1. 查看表
show tables;
2.创建表
create table t1()
3.查看表字段
desc t1;
4.删除表
drop table t1;
5.修改表名
rename table t1 to t2;
6.查看表数据
select * from t1;
7.插入表数据
insert into t1(id) values(222);

三.
1.字段属性
unsigned -> 无符号
zerofill -> 0填充  int(3)->001
auto_increment
null  -> 这一列值允许null
not null ->反の
default -> 默认

//创建表
create table joker4(
    id int unsigned auto_increment primary key,
    name varchar(30),
    sex varchar(5) not null default "nv"
);

alter table joker2 add weight varchar(5) not null default "80kg";

四：数据库字符集
\s 查看服务器端的基本信息

//服务器字符集
Server characterset:    latin1

//数据库字符集
Db     characterset:    latin1

//客户端字符集
Client characterset:    gbk

//客户端链接字符集
Conn.  characterset:    gbk

//查看数据库字符集
show create database feiniu;

//查看table字符集
show create table joker3;

五.数据表索引设置-表字段索引：

1.主键索引primary key(id),

2.普通索引index

检测sql语句：desc select * from t1 where id=2\G    // \G是为了横着看  \c 退出当前语句

创建带索引的表：
mysql> create table t2(
    -> id int unsigned auto_increment,
    -> name varchar(30),
    -> primary key(id),
    -> index in_named(name));

mysql帮助手段：? show

-------后期维护普通索引：
1.添加普通索引
mysql> alter table t2 add index in_named(name);
2.删除普通索引
mysql> alter table t2 drop index in_named;

查看索引：show index from t2\G

-------后期维护表字段
1.添加字段
mysql> alter table t1 add age int;
2.修改字段
mysql> alter table t1 modify age int not null default 20;
3.删除字段
mysql> alter table t1 drop age;
4.修改字段名 索引不会丢
mysql> alter table t1 change name username varchar(30);



mysql数据库设计篇：--------------------------------------------------------------------
1.数据库表概念
2.数据值和列类型
3.数据字段属性
4.数据表对象管理
5.数据表的类型及存储类型
6.数据表的默认字符集
7.创建索引

表字段类型：
1.数值
int(2)  2与长度无关，而是不足2，前面补零,默认看不见
float
2.字符串
char(n)  --比varchar快     char(10),如果实际是5个字节，那么就浪费5个字节。但是快  255个字节 --- 占n个字节，但是快
varchar(n) -- 比char 要节省空间。   最大255个字节---存多少占多少字节
text  65535字节
longtext  42亿字节
3.日期
date
time
datetime
year
//建议日期类型存int


-----------------------------------------mysql结构化查询语言------------------------------------
1. DDL  //数据定义语言  create,drop,alter
2. DML  //数据操作语言 insert,update,delete
3. DQL  //数据查询语言 select
4. DCL  //数据控制语言 grant,commit,rollback

mysql中没有 == 只有 =

增--insert  //只要表没被删过，主键会一直自增
mysql> insert into joker2(name) values("yeling");

改--update
mysql> update joker2 set  name='yelingUpdate' where id=18;
mysql> update joker2 set  name='yelingUpdate',age=20 where id>=18;


删--delete
mysql> delete from joker2 where id=17;                  //等于17的会被删
mysql> delete from joker2 where id<=7 and id >=17;      //小于等于7的会被删
mysql> delete from joker2 where id in(8,9);             //8 9会被删
mysql> delete from joker2 where id=3 or id=5;           //3 5会被删
mysql> delete from joker2 where id between 10 and 12;   //10 11 12都会被删


查--select  //把name为yeling的表joker2中的id查出来--->
a.选择特定的字段
mysql> select id from joker2 where name='yeling';
mysql> select id,name from joker2 where name='yeling';
b.给字段取别名 -as
select id,name from joker2;

mysql> select sex x,name n,id from joker2 where id=19;
mysql> select sex as x,name as n,id from joker2 where id=19;
字段和别名之间也可以用 as 来代替空格
+------+------+----+
| x    | n    | id |
+------+------+----+
| nan  | zk   | 19 |
+------+------+----+

c.取唯一值  去掉列中的重复值，不能多列
mysql> select distinct name from joker2;

d.使用where条件查询

e.查询空null
mysql> select * from joker2 where sex is null;
mysql> select * from joker2 where sex is not null;

f.搜索like关键字--%代表任意多的字符 _ 代表一个字符 like  正则
mysql> select * from joker2 where name like '%use%' or name like '%2%';
mysql> select * from joker2 where name regexp '(.*4.*)|(.*3.*)|(.*8.*)';
mysql> select * from joker2 where name regexp '.*z.*';

g.使用orderby 对查询结果排序
mysql> select * from joker2 order by weight;
mysql> select * from joker2 order by id asc;  //ID从小到大  升序
mysql> select * from joker2 order by id desc;  //ID从大到小  降序

h.使用limit限制输出个数
mysql> select * from joker2 order by weight asc limit 1;
+----+------+------+--------+
| id | name | sex  | weight |
+----+------+------+--------+
| 20 | tj   | nan  | 50kg   |
+----+------+------+--------+
mysql> select * from joker2 order by weight asc limit 0,3;
+----+-------+------+--------+
| id | name  | sex  | weight |
+----+-------+------+--------+
| 20 | tj    | nan  | 50kg   |
| 25 | user2 | NULL | 50kg   |
| 24 | user2 | NULL | 50kg   |
+----+-------+------+--------+
mysql> select * from joker2 order by weight asc limit 3,5;

i.concat 函数 - 字符串连接符
mysql> CONCAT('My', 'S', 'QL');  =>'MySQL'
mysql> select concat("a","-","b");
+---------------------+
| concat("a","-","b") |
+---------------------+
| a-b                 |
+---------------------+

mysql> select id,name,concat(id,name) from joker2;
+----+--------------+-----------------+
| id | name         | concat(id,name) |
+----+--------------+-----------------+

j.rand 函数 -- 随机排序
mysql> select * from joker2 order by rand() limit 1;
+----+-------+------+--------+
| id | name  | sex  | weight |
+----+-------+------+--------+
| 24 | user2 | NULL | 50kg   |
+----+-------+------+--------+

k.count统计
mysql> select count(id) tot from joker2;   //主键
--快速得到select count(*) tot from joker2;  //用*
mysql> select count(id) from joker2 where name="user2";
+-----------+
| count(id) |
+-----------+
|         5 |
+-----------+

l.sum求和
mysql> select sum(id) from joker2 where name="user2";

m.avg求平均数
mysql> select avg(id) from joker2;
+---------+
| avg(id) |
+---------+
| 19.6923 |
+---------+

n.max最大值 min最小值
mysql> select max(id) from joker2;
mysql> select min(id) from joker2;

o.group by 分组聚合
原本：
+----+-------+------------------------+
| id | name  | content                |
+----+-------+------------------------+
|  1 | user1 | aaaaaaaaaaaaaaaaaa     |
|  2 | user1 | bbbbbbbbbbbbbbbbbb     |
|  3 | user1 | ccccccccccccccccc      |
|  4 | user2 | ccccccccccccccccc      |
|  5 | user2 | dddddddddddddddddddddc |
|  6 | user3 | dddddddddddddddddddddc |
|  7 | user3 | 111111111111111111c    |
|  8 | usr4  | 111111111111111111c    |
|  9 | usr4  | 111111111111111111c    |
| 10 | usr4  | 2222222222222222222    |
| 11 | usr4  | 2222222222222222222    |
| 12 | usr4  | 2222222222222222222    |
| 13 | usr4  | 2222222222222222222    |
+----+-------+------------------------+
mysql> select name,count(id) from mess group by name;  //每一个人发了多少帖子
+-------+-----------+
| name  | count(id) |
+-------+-----------+
| user1 |         3 |
| user2 |         2 |
| user3 |         2 |
| usr4  |         6 |
+-------+-----------+

mysql> select name,count(id) from mess group by name order by count(id) desc;

mysql> select name,count(id) tot from mess group by name order by tot desc;  //分组group by 一定写在order by前面，优先级高
+-------+-----+
| name  | tot |
+-------+-----+
| usr4  |   6 |
| user1 |   3 |
| user3 |   2 |
| user2 |   2 |
+-------+-----+

mysql> select name,count(id) tot from mess group by name having tot>=5;  //having 在group by 后面 ，对分组结果进行筛选，不能用where
+------+-----+
| name | tot |
+------+-----+
| usr4 |   6 |
+------+-----+

p.多表查询
  1）普通多表查询-多表(优先选择)
  mysql> create table us(
    -> id int unsigned auto_increment primary key,
    -> name varchar(30),
    -> age int);
  mysql> create table post(
    -> id int unsigned auto_increment primary key,
    -> title varchar(200),
    -> content text);
  mysql> select * from us,post where us.id=post.uid;
  +----+------+------+----+------+-------------+---------------+
  | id | name | age  | id | uid  | title       | content       |
  +----+------+------+----+------+-------------+---------------+
  |  2 | us2  |   20 |  3 |    2 | 2222222t    | I 1111  |
  |  3 | us4  |   25 |  1 |    3 | post tit    | I love 1111 |
  |  3 | us4  |   25 |  2 |    3 | post ti111t | I 1111  |
  |  5 | us5  |   25 |  4 |    5 | 555555      | I 1111 |
  +----+------+------+----+------+-------------+---------------+
  论坛帖子需求：
  mysql> select us.name,count(us.id) from us,post where us.id=post.uid group by us
  .name;
  +------+--------------+
  | name | count(us.id) |
  +------+--------------+
  | us2  |            1 |
  | us4  |            2 |
  | us5  |            1 |
  +------+--------------+
  mysql> select us.name,post.title,post.content from us,post;
  mysql> select us.name,post.title,post.content from us,post where us.id=post.uid;
  +------+-------------+---------------+
  | name | title       | content       |
  +------+-------------+---------------+
  | us2  | 2222222t    | I lovedddddu  |
  | us4  | post tit    | I love zhuzhu |
  | us4  | post ti111t | I lovedddddu  |
  | us5  | 555555      | I lov55555ddu |
  +------+-------------+---------------+
  2）左链接-多表
  其中一个表字段全盘显示，另一个表

  mysql> select  us.name,post.title,post.content from us left join post on us.id=p
  ost.uid group by us.id;
  +------+----------+---------------+
  | name | title    | content       |
  +------+----------+---------------+
  | us1  | NULL     | NULL          |
  | us2  | 2222222t | I lovedddddu  |
  | us4  | post tit | I love zhuzhu |
  | us7  | NULL     | NULL          |
  | us5  | 555555   | I lov55555ddu |
  +------+----------+---------------+
  5 rows in set (0.02 sec)

  3）嵌套查询或者子查询-多表
  mysql> select name from us where id in (select id from post);
  +------+
  | name |
  +------+
  | us1  |
  | us2  |
  | us4  |
  | us7  |
  +------+
  mysql> select distinct us.name from us,post where us.id=post.uid;  //普通查询一样能得到
  +------+
  | name |
  +------+
  | us2  |
  | us4  |
  | us5  |
  +------+
  3 rows in set (0.00 sec)
q. mysql> alter table post add uid int after id;


//----------------------------------------------------------------------------------------------------------
从结果中取全部数据
//mysql_fetch_assoc  从结果集中取得一行作为关联数组
while($row=mysql_feth_assoc($result)){
  echo "<pre>";
  print_r($row);
  echo "</pre>";
}

//取得上一步 INSERT 操作产生的ID
mysql_insert_id();

//得到insert，update，delete操作影响的行数
mysql_affected_rows();

//— 取得结果集中行的数目
mysql_num_rows

实例：用户模块管理
实例：用户分页显示























